{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","onLeaveFeedback","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","type","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","this","percentage","Component","ReactDOM","render","document","getElementById"],"mappings":"yNAiBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCUQC,EAdS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,qCACE,wBAAQC,QAAS,kBAAMD,EAAgB,SAAvC,kBACA,wBAAQC,QAAS,kBAAMD,EAAgB,YAAvC,qBACA,wBAAQC,QAAS,kBAAMD,EAAgB,QAAvC,qBCeSE,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,2CAAcC,EAAd,WCCSC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCmDEC,E,4MAhDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPL,gBAAkB,SAACY,GACjB,EAAKC,UAAS,SAACC,GAAD,sBACXF,EAAOE,EAAUF,GAAQ,O,EAI9BG,mBAAqB,WACnB,OAAO,EAAKJ,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,K,EAG3DW,gCAAkC,WAChC,IAAMV,EAAQ,EAAKS,qBACnB,OAAKT,EACEW,KAAKC,MAAO,EAAKP,MAAMR,KAAOG,EAAS,KAD3B,G,4CAIrB,WACE,IAAMA,EAAQa,KAAKJ,qBACbK,EAAaD,KAAKH,kCACxB,OACE,qCACE,cAAC,EAAD,CAASnB,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBG,gBAAiBmB,KAAKnB,oBAEzC,cAAC,EAAD,CAASH,MAAO,aAAhB,SACIS,EAGA,cAAC,EAAD,CACEH,KAAMgB,KAAKR,MAAMR,KACjBC,QAASe,KAAKR,MAAMP,QACpBC,IAAKc,KAAKR,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBa,IAPtB,cAAC,EAAD,CAAcX,QAAS,+B,GAjCjBY,aCFlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.076dd388.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  return (\n    <>\n      <button onClick={() => onLeaveFeedback(\"good\")}>Good</button>\n      <button onClick={() => onLeaveFeedback(\"neutral\")}>Neutral</button>\n      <button onClick={() => onLeaveFeedback(\"bad\")}>Bad</button>\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive: {positivePercentage}%</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (type) => {\n    this.setState((prevState) => ({\n      [type]: prevState[type] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    if (!total) return 0;\n    return Math.floor((this.state.good / total) * 100);\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n    const percentage = this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        <Section title={\"Statistics\"}>\n          {!total ? (\n            <Notification message={\"No feedback given\"} />\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={percentage}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}